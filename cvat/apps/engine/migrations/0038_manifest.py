# Generated by Django 3.1.1 on 2021-02-20 08:36

from django.db import migrations
from cvat.apps.engine.models import StorageMethodChoice, StorageChoice
from django.conf import settings
from utils.dataset_manifest import prepare_meta, VideoManifestManager, ImageManifestManager
import glob
import os

def migrate_data(apps, shema_editor):
    Data = apps.get_model("engine", "Data")
    query_set = Data.objects.filter(storage_method=StorageMethodChoice.CACHE)
    for db_data in query_set:
        upload_dir = '{}/{}/raw'.format(settings.MEDIA_DATA_ROOT, db_data.id)
        data_dir = upload_dir if db_data.storage == StorageChoice.LOCAL else settings.SHARE_ROOT
        if hasattr(db_data, 'video'):
            media_file = os.path.join(data_dir, db_data.video.path)
            meta_info, _ = prepare_meta(
                data_type='video',
                media_file=media_file,
            )
            manifest = VideoManifestManager(manifest_path=upload_dir)
            manifest.create(meta_info)
            manifest.init_index()
            if os.path.exists(os.path.join(upload_dir, 'meta_info.txt')):
                os.remove(os.path.join(upload_dir, 'meta_info.txt'))
        else:
            sources = [os.path.join(data_dir, db_image.path) for db_image in db_data.images.all().order_by('frame')]
            # or better to get all possible needed info from db?
            meta_info = prepare_meta(data_type='images', sources=sources, data_dir=data_dir)
            manifest = ImageManifestManager(manifest_path=upload_dir)
            manifest.create(meta_info.content)
            manifest.init_index()
            for path in glob.glob(f'{upload_dir}/dummy_*.txt'):
                os.remove(path)


class Migration(migrations.Migration):

    dependencies = [
        ('engine', '0037_task_subset'),
    ]

    operations = [
        migrations.RunPython(migrate_data)
    ]
