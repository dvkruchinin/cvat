name: CI
on:
  push:
    branches:
      - 'master'
      - 'develop'
  pull_request:
    branches:
      - '*'
jobs:
  Build_CVAT:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        env:
          cache-name: cvat_server
        with:
          path: /tmp/cvat_cache
          key: ${{ runner.os }}-build-${{ env.cache-name }}
          restore-keys: |
            ${{ runner.os }}-build-
      - name: For debug
        run: |
          docker images
          docker ps
      - name: Build CVAT
        env:
          DOCKER_BUILDKIT: 1
          COMPOSE_DOCKER_CLI_BUILD: 1
        run: |
          docker-compose -f docker-compose.yml -f docker-compose.dev.yml -f docker-compose.ci.yml build

  Unit_testing:
      needs: Build_CVAT
      runs-on: ubuntu-latest
      steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        env:
          cache-name: cvat_server
        with:
          path: /tmp/cvat_cache
          key: ${{ runner.os }}-build-${{ env.cache-name }}
          restore-keys: |
            ${{ runner.os }}-build-
      - name: For debug
        run: |
          docker images
          docker ps
      - name: Run unit tests
        env:
          HOST_COVERAGE_DATA_DIR: ${{ github.workspace }}
          CONTAINER_COVERAGE_DATA_DIR: "/coverage_data"
          DOCKER_BUILDKIT: 1
          COMPOSE_DOCKER_CLI_BUILD: 1
        run: |
          docker-compose -f docker-compose.yml -f docker-compose.dev.yml -f docker-compose.ci.yml run cvat_ci /bin/bash -c 'coverage run -a manage.py test cvat/apps utils/cli && mv .coverage ${CONTAINER_COVERAGE_DATA_DIR}'
          docker-compose -f docker-compose.yml -f docker-compose.dev.yml -f docker-compose.ci.yml run cvat_ci /bin/bash -c 'cd cvat-data && npm ci && cd ../cvat-core && npm ci && npm run test && mv ./reports/coverage/lcov.info ${CONTAINER_COVERAGE_DATA_DIR} && chmod a+rwx ${CONTAINER_COVERAGE_DATA_DIR}/lcov.info'
      - uses: actions/upload-artifact@v2
        with:
          name: coverage_results
          path: |
            ${{ github.workspace }}/.coverage
            ${{ github.workspace }}/lcov.info

  E2E_testing:
    needs: Build_CVAT
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        specs: ['actions_tasks', 'actions_objects', 'actions_users', 'actions_projects', 'canvas3d_functionality', 'issues_prs']
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
            node-version: 12
      - uses: actions/cache@v2
        env:
          cache-name: cvat_server
        with:
          path: /tmp/cvat_cache
          key: ${{ runner.os }}-build-${{ env.cache-name }}
          restore-keys: |
            ${{ runner.os }}-build-
      - name: Code instrumentation
        run: |
          npm ci
          npm run coverage
      - name: For debug
        run: |
          docker images
          docker ps
      - name: Build CVAT
        env:
          DJANGO_SU_NAME: 'admin'
          DJANGO_SU_EMAIL: 'admin@localhost.company'
          DJANGO_SU_PASSWORD: '12qwaszx'
          API_ABOUT_PAGE: "localhost:8080/api/v1/server/about"
          DOCKER_BUILDKIT: 1
          COMPOSE_DOCKER_CLI_BUILD: 1
        run: |
          docker-compose -f docker-compose.yml -f docker-compose.dev.yml up -d --build
          /bin/bash -c 'while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' ${API_ABOUT_PAGE})" != "401" ]]; do sleep 5; done'
          docker exec -i cvat /bin/bash -c "echo \"from django.contrib.auth.models import User; User.objects.create_superuser('${DJANGO_SU_NAME}', '${DJANGO_SU_EMAIL}', '${DJANGO_SU_PASSWORD}')\" | python3 ~/manage.py shell"          docker exec -i cvat /bin/bash -c "echo \"from django.contrib.auth.models import User; User.objects.create_superuser('${DJANGO_SU_NAME}', '${DJANGO_SU_EMAIL}', '${DJANGO_SU_PASSWORD}')\" | python3 ~/manage.py shell"
      - name: End-to-end testing
        run: |
          cd ./tests
          npm ci
          npx cypress run --headless --browser chrome --spec 'cypress/integration/${{ matrix.specs }}/**/*.js'
          mv ./.nyc_output/out.json ./.nyc_output/out_${{ matrix.specs }}.json
      - name: Uploading cypress screenshots as an artifact
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: cypress_screenshots_${{ matrix.specs }}
          path: ${{ github.workspace }}/tests/cypress/screenshots
      - uses: actions/upload-artifact@v2
        with:
          name: coverage_results
          path: ${{ github.workspace }}/tests/.nyc_output

  Coveralls:
    runs-on: ubuntu-latest
    needs: [Unit_testing, E2E_testing]
    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v2
      env:
        cache-name: cvat_server
      with:
        path: /tmp/cvat_cache
        key: ${{ runner.os }}-build-${{ env.cache-name }}
        restore-keys: |
            ${{ runner.os }}-build-
    - name: For debug
      run: |
        docker images
        docker ps
    - name: Download coverage results
      uses: actions/download-artifact@v2
      with:
        name: coverage_results
    - name: Combine coverage results
      run: |
        mkdir -p ./nyc_output_tmp
        mv ./out_*.json ./nyc_output_tmp
        mkdir -p ./.nyc_output
        npm ci
        npx nyc merge ./nyc_output_tmp ./.nyc_output/out.json
    - name: Send results to Coveralls
      env:
        HOST_COVERAGE_DATA_DIR: ${{ github.workspace }}
        CONTAINER_COVERAGE_DATA_DIR: "/coverage_data"
        COVERALLS_SERVICE_NAME: github
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        DOCKER_BUILDKIT: 1
        COMPOSE_DOCKER_CLI_BUILD: 1
      run: |
          npx nyc report --reporter=text-lcov >> ${HOST_COVERAGE_DATA_DIR}/lcov.info
          docker-compose -f docker-compose.yml -f docker-compose.dev.yml -f docker-compose.ci.yml run cvat_ci /bin/bash -c 'cd ${CONTAINER_COVERAGE_DATA_DIR} && coveralls-lcov -v -n lcov.info > ${CONTAINER_COVERAGE_DATA_DIR}/coverage.json'
          docker-compose -f docker-compose.yml -f docker-compose.dev.yml -f docker-compose.ci.yml run cvat_ci /bin/bash -c 'ln -s ${CONTAINER_COVERAGE_DATA_DIR}/.git . && ln -s ${CONTAINER_COVERAGE_DATA_DIR}/.coverage . && ln -s ${CONTAINER_COVERAGE_DATA_DIR}/coverage.json . && coveralls --merge=coverage.json'
